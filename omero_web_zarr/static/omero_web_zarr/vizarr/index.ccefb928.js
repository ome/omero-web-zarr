var imjoyRpc$1={exports:{}};(function(module,exports){var factory;window,factory=function(){return function(e){var n={};function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}return t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)t.d(r,o,function(n){return e[n]}.bind(null,o));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s="./src/main.js")}({"./node_modules/worker-loader/dist/workers/InlineWorker.js":function(e,n,t){var r=window.URL||window.webkitURL;e.exports=function(e,n){try{try{var t;try{(t=new(window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder)).append(e),t=t.getBlob()}catch(o){t=new Blob([e])}return new Worker(r.createObjectURL(t))}catch(o){return new Worker("data:application/javascript,"+encodeURIComponent(e))}}catch(o){if(!n)throw Error("Inline worker is not supported");return new Worker(n)}}},"./package.json":function(e){e.exports=JSON.parse('{"name":"imjoy-rpc","version":"0.2.31","description":"Remote procedure calls for ImJoy.","module":"index.js","scripts":{"build":"rm -rf dist && npm run build-umd","build-umd":"webpack --config webpack.config.js --mode development && NODE_ENV=production webpack --config webpack.config.js --mode production --devtool source-map ","watch":"NODE_ENV=production webpack --watch --progress --config webpack.config.js --mode production --devtool source-map","publish-npm":"npm install && npm run build && npm publish","serve":"webpack-dev-server","stats":"webpack --profile --json > stats.json","stats-prod":"webpack --profile --json --mode production > stats-prod.json","analyze":"webpack-bundle-analyzer -p 9999 stats.json","analyze-prod":"webpack-bundle-analyzer -p 9999 stats-prod.json","clean":"rimraf dist/*","deploy":"npm run build && node deploy-site.js","format":"prettier --write \\"{src,tests}/**/**\\"","check-format":"prettier --check \\"{src,tests}/**/**\\"","test":"karma start --single-run --browsers ChromeHeadless,FirefoxHeadless karma.conf.js","test-watch":"karma start --auto-watch --browsers Chrome,FirefoxHeadless karma.conf.js --debug"},"repository":{"type":"git","url":"git+https://github.com/imjoy-team/imjoy-rpc.git"},"keywords":["imjoy","rpc"],"author":"imjoy-team <imjoy.team@gmail.com>","license":"MIT","bugs":{"url":"https://github.com/imjoy-team/imjoy-rpc/issues"},"homepage":"https://github.com/imjoy-team/imjoy-rpc","dependencies":{},"devDependencies":{"@babel/core":"^7.0.0-beta.39","@babel/plugin-syntax-dynamic-import":"^7.0.0-beta.39","@babel/polyfill":"^7.0.0-beta.39","@babel/preset-env":"^7.0.0-beta.39","@types/requirejs":"^2.1.28","babel-core":"^6.26.0","babel-eslint":"^10.1.0","babel-loader":"^8.1.0","babel-runtime":"^6.26.0","chai":"^4.2.0","clean-webpack-plugin":"^0.1.19","copy-webpack-plugin":"^5.0.5","eslint":"^6.8.0","eslint-config-prettier":"^4.2.0","eslint-loader":"^4.0.2","file-loader":"^0.11.2","fs-extra":"^0.30.0","gh-pages":"^2.0.1","html-loader":"^0.5.5","html-webpack-plugin":"^3.2.0","json-loader":"^0.5.4","karma":"^4.4.1","karma-chrome-launcher":"^3.1.0","karma-firefox-launcher":"^1.3.0","karma-mocha":"^1.3.0","karma-spec-reporter":"0.0.32","karma-webpack":"^4.0.2","lerna":"^3.8.0","lodash.debounce":"^4.0.8","mocha":"^7.1.2","postcss":"^6.0.2","prettier":"^1.6.1","rimraf":"^2.6.2","schema-utils":"^0.4.3","socket.io-client":"^2.3.0","style-loader":"^0.18.1","url-loader":"^0.5.9","webpack":"^4.0.0","webpack-bundle-analyzer":"^3.3.2","webpack-cli":"^3.1.2","webpack-dev-server":"^3.1.1","webpack-merge":"^4.1.1","workbox-webpack-plugin":"^4.3.1","worker-loader":"^2.0.0","write-file-webpack-plugin":"^4.5.1"},"eslintConfig":{"globals":{"document":true,"window":true}}}')},"./src/main.js":function(e,n,t){t.r(n),t.d(n,"waitForInitialization",(function(){return d})),t.d(n,"setupRPC",(function(){return l}));var r=t("./src/plugin.webworker.js"),o=t.n(r),i=t("./src/pluginIframe.js"),a=t("./src/utils.js"),s=t("./src/rpc.js");t.d(n,"RPC",(function(){return s.RPC})),t.d(n,"API_VERSION",(function(){return s.API_VERSION}));var c=t("./package.json");function _(){try{return window.self!==window.top}catch(e){return!0}}function d(e){if(!_())throw new Error("waitForInitialization (imjoy-rpc) should only run inside an iframe.");const n=(e=e||{}).target_origin||"*";if(e.credential_required&&"function"!=typeof e.verify_credential)throw new Error("Please also provide the `verify_credential` function with `credential_required`.");if(e.credential_required&&"*"===n)throw new Error("`target_origin` was set to `*` with `credential_required=true`, there is a security risk that you may leak the credential to website from other origin. Please specify the `target_origin` explicitly.");const t=Object(a.randId)(),r=o=>{if("message"===o.type&&("*"===n||o.origin===n)){if("initialize"!==o.data.type)throw new Error(`unrecognized message: ${o.data}`);{window.removeEventListener("message",r),o.data.peer_id!==t&&console.warn(`${o.data.config&&o.data.config.name}: connection peer id mismatch ${o.data.peer_id} !== ${t}`);const i=o.data.config;"*"!==n&&(i.target_origin=n),e.credential_required?e.verify_credential(i.credential).then((e=>{if(!e||!e.auth||e.error)throw new Error("Failed to verify the credentail:"+(e&&e.error));i.auth=e.auth,l(i).then((()=>{console.log("ImJoy RPC loaded successfully!")}))})):l(i).then((()=>{console.log("ImJoy RPC loaded successfully!")}))}}};window.addEventListener("message",r),parent.postMessage({type:"imjoyRPCReady",config:e,peer_id:t},"*")}function l(e){if(!(e=e||{}).name)throw new Error("Please specify a name for your app.");return e.version=e.version||"0.1.0",e.description=e.description||`[TODO: add description for ${e.name} ]`,e.type=e.type||"rpc-window",e.id=e.id||Object(a.randId)(),e.allow_execution=e.allow_execution||!1,e.enable_service_worker&&Object(a.setupServiceWorker)(e.base_url,e.target_origin,e.cache_requirements),e.cache_requirements&&delete e.cache_requirements,e=Object.keys(e).reduce(((n,t)=>("function"!=typeof e[t]&&(n[t]=e[t]),n)),{}),new Promise(((n,t)=>{if(_()){if("web-worker"===e.type)try{!function(e){if(!e.allow_execution)throw new Error("web-worker plugin can only work with allow_execution=true");const n=new o.a,t=setTimeout((function(){n.terminate(),console.warn("Plugin failed to start as a web-worker, running in an iframe instead."),Object(i.default)(e)}),2e3),r=Object(a.randId)();n.addEventListener("message",(function(o){let i;const a=o.data;if("worker-ready"===a.type)return n.postMessage({type:"connectRPC",config:e}),void clearTimeout(t);"initialized"===a.type?(a.config=Object.assign({},e,a.config),a.origin=window.location.origin,a.peer_id=r):"imjoy_remote_api_ready"===a.type?window.dispatchEvent(new CustomEvent("imjoy_remote_api_ready",{detail:null})):"cacheRequirements"===a.type&&"function"==typeof cache_requirements?cache_requirements(a.requirements):"disconnect"===a.type?n.terminate():a.__transferables__&&(i=a.__transferables__,delete a.__transferables__),parent.postMessage(a,e.target_origin||"*",i)})),window.addEventListener("message",(function(t){let o;const i=t.data;i.__transferables__&&(o=i.__transferables__,delete i.__transferables__),i.peer_id===r?n.postMessage(i,o):e.debug&&console.log(`connection peer id mismatch ${i.peer_id} !== ${r}`)}))}(e)}catch(r){Object(i.default)(e)}else["rpc-window","rpc-worker","iframe","window"].includes(e.type)?Object(i.default)(e):(console.error("Unsupported plugin type: "+e.type),t("Unsupported plugin type: "+e.type));try{const t=r=>{const o=r.detail;e.expose_api_globally&&(window.api=o),n(o),window.removeEventListener("imjoy_remote_api_ready",t)};window.addEventListener("imjoy_remote_api_ready",t)}catch(r){t(r)}}else t(new Error("imjoy-rpc should only run inside an iframe."))}))}t.d(n,"VERSION",(function(){return c.version}))},"./src/plugin.webworker.js":function(e,n,t){e.exports=function(){return t("./node_modules/worker-loader/dist/workers/InlineWorker.js")('/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== \'undefined\' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: \'Module\' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, \'__esModule\', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === \'object\' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, \'default\', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != \'string\') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module[\'default\']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, \'a\', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = "./src/plugin.webworker.js");\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ "./src/plugin.webworker.js":\n/*!*********************************!*\\\n  !*** ./src/plugin.webworker.js ***!\n  \\*********************************/\n/*! no exports provided */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n"use strict";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _pluginCore_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pluginCore.js */ "./src/pluginCore.js");\n/* harmony import */ var _rpc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rpc.js */ "./src/rpc.js");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ "./src/utils.js");\n/**\n * Contains the routines loaded by the plugin Worker under web-browser.\n *\n * Initializes the web environment version of the platform-dependent\n * connection object for the plugin site\n */\n\n\n\n\n(function() {\n  // make sure this runs inside a webworker\n  if (\n    typeof WorkerGlobalScope === "undefined" ||\n    !self ||\n    !(self instanceof WorkerGlobalScope)\n  ) {\n    throw new Error("This script can only loaded in a webworker");\n  }\n  /**\n   * Connection object provided to the RPC constructor,\n   * plugin site implementation for the web-based environment.\n   * Global will be then cleared to prevent exposure into the\n   * Worker, so we put this local connection object into a closure\n   */\n  class Connection extends _utils_js__WEBPACK_IMPORTED_MODULE_2__["MessageEmitter"] {\n    constructor(config) {\n      super(config && config.debug);\n      this.config = config || {};\n    }\n    connect() {\n      self.addEventListener("message", e => {\n        this._fire(e.data.type, e.data);\n      });\n      this.emit({\n        type: "initialized",\n        config: this.config\n      });\n    }\n    disconnect() {\n      this._fire("beforeDisconnect");\n      self.close();\n      this._fire("disconnected");\n    }\n    emit(data) {\n      let transferables = undefined;\n      if (data.__transferables__) {\n        transferables = data.__transferables__;\n        delete data.__transferables__;\n      }\n      self.postMessage(data, transferables);\n    }\n    async execute(code) {\n      if (code.type === "requirements") {\n        try {\n          if (\n            code.requirements &&\n            (Array.isArray(code.requirements) ||\n              typeof code.requirements === "string")\n          ) {\n            try {\n              if (!Array.isArray(code.requirements)) {\n                code.requirements = [code.requirements];\n              }\n              for (var i = 0; i < code.requirements.length; i++) {\n                if (\n                  code.requirements[i].toLowerCase().endsWith(".css") ||\n                  code.requirements[i].startsWith("css:")\n                ) {\n                  throw "unable to import css in a webworker";\n                } else if (\n                  code.requirements[i].toLowerCase().endsWith(".js") ||\n                  code.requirements[i].startsWith("js:")\n                ) {\n                  if (code.requirements[i].startsWith("js:")) {\n                    code.requirements[i] = code.requirements[i].slice(3);\n                  }\n                  importScripts(code.requirements[i]);\n                } else if (code.requirements[i].startsWith("http")) {\n                  importScripts(code.requirements[i]);\n                } else if (code.requirements[i].startsWith("cache:")) {\n                  //ignore cache\n                } else {\n                  console.log(\n                    "Unprocessed requirements url: " + code.requirements[i]\n                  );\n                }\n              }\n            } catch (e) {\n              throw "failed to import required scripts: " +\n                code.requirements.toString();\n            }\n          }\n        } catch (e) {\n          throw e;\n        }\n      } else if (code.type === "script") {\n        try {\n          if (\n            code.requirements &&\n            (Array.isArray(code.requirements) ||\n              typeof code.requirements === "string")\n          ) {\n            try {\n              if (Array.isArray(code.requirements)) {\n                for (let i = 0; i < code.requirements.length; i++) {\n                  importScripts(code.requirements[i]);\n                }\n              } else {\n                importScripts(code.requirements);\n              }\n            } catch (e) {\n              throw "failed to import required scripts: " +\n                code.requirements.toString();\n            }\n          }\n          eval(code.content);\n        } catch (e) {\n          console.error(e.message, e.stack);\n          throw e;\n        }\n      } else {\n        throw "unsupported code type.";\n      }\n      if (code.type === "requirements") {\n        self.postMessage({\n          type: "cacheRequirements",\n          requirements: code.requirements\n        });\n      }\n    }\n  }\n  const config = {\n    type: "web-worker",\n    dedicated_thread: true,\n    allow_execution: true,\n    lang: "javascript",\n    api_version: _rpc_js__WEBPACK_IMPORTED_MODULE_1__["API_VERSION"]\n  };\n  const conn = new Connection(config);\n  conn.on("connectRPC", data => {\n    Object(_pluginCore_js__WEBPACK_IMPORTED_MODULE_0__["connectRPC"])(conn, Object.assign(data.config, config));\n  });\n  conn.connect();\n  self.postMessage({\n    type: "worker-ready"\n  });\n})();\n\n\n/***/ }),\n\n/***/ "./src/pluginCore.js":\n/*!***************************!*\\\n  !*** ./src/pluginCore.js ***!\n  \\***************************/\n/*! exports provided: connectRPC */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n"use strict";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "connectRPC", function() { return connectRPC; });\n/* harmony import */ var _rpc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rpc.js */ "./src/rpc.js");\n/**\n * Core plugin script loaded into the plugin process/thread.\n *\n * Initializes the plugin-site API global methods.\n */\n\nfunction connectRPC(connection, config) {\n  config = config || {};\n  const codecs = {};\n  const rpc = new _rpc_js__WEBPACK_IMPORTED_MODULE_0__["RPC"](connection, config, codecs);\n  rpc.on("getInterface", function () {\n    launchConnected();\n  });\n  rpc.on("remoteReady", function () {\n    const api = rpc.getRemote() || {};\n\n    if (api.export) {\n      throw new Error("`export` is a reserved function name");\n    }\n\n    if (api.onload) {\n      throw new Error("`onload` is a reserved function name");\n    }\n\n    if (api.dispose) {\n      throw new Error("`dispose` is a reserved function name");\n    }\n\n    api.registerCodec = function (config) {\n      if (!config["name"] || !config["encoder"] && !config["decoder"]) {\n        throw new Error("Invalid codec format, please make sure you provide a name, type, encoder and decoder.");\n      } else {\n        if (config.type) {\n          for (let k of Object.keys(codecs)) {\n            if (codecs[k].type === config.type || k === config.name) {\n              delete codecs[k];\n              console.warn("Remove duplicated codec: " + k);\n            }\n          }\n        }\n\n        codecs[config["name"]] = config;\n      }\n    };\n\n    api.init = function (config) {\n      // register a minimal plugin api\n      rpc.setInterface({\n        setup() {}\n\n      }, config);\n    };\n\n    api.disposeObject = function (obj) {\n      rpc.disposeObject(obj);\n    };\n\n    api.export = function (_interface, config) {\n      rpc.setInterface(_interface, config);\n    };\n\n    api.onLoad = function (handler) {\n      handler = checkHandler(handler);\n\n      if (connected) {\n        handler();\n      } else {\n        connectedHandlers.push(handler);\n      }\n    };\n\n    api.dispose = function (_interface) {\n      rpc.disconnect();\n    };\n\n    if (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) {\n      self.api = api;\n      self.postMessage({\n        type: "imjoy_remote_api_ready"\n      });\n    } else if (typeof window) {\n      window.dispatchEvent(new CustomEvent("imjoy_remote_api_ready", {\n        detail: api\n      }));\n    }\n  });\n  let connected = false;\n  const connectedHandlers = [];\n\n  const launchConnected = function () {\n    if (!connected) {\n      connected = true;\n      let handler;\n\n      while (handler = connectedHandlers.pop()) {\n        handler();\n      }\n    }\n  };\n\n  const checkHandler = function (handler) {\n    const type = typeof handler;\n\n    if (type !== "function") {\n      const msg = "A function may only be subsribed to the event, " + type + " was provided instead";\n      throw new Error(msg);\n    }\n\n    return handler;\n  };\n\n  return rpc;\n}\n\n/***/ }),\n\n/***/ "./src/rpc.js":\n/*!********************!*\\\n  !*** ./src/rpc.js ***!\n  \\********************/\n/*! exports provided: API_VERSION, RPC */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n"use strict";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "API_VERSION", function() { return API_VERSION; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RPC", function() { return RPC; });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ "./src/utils.js");\n/**\n * Contains the RPC object used both by the application\n * site, and by each plugin\n */\n\nconst API_VERSION = "0.2.3";\nconst ArrayBufferView = Object.getPrototypeOf(Object.getPrototypeOf(new Uint8Array())).constructor;\n\nfunction _appendBuffer(buffer1, buffer2) {\n  const tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\n  tmp.set(new Uint8Array(buffer1), 0);\n  tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\n  return tmp.buffer;\n}\n\nfunction indexObject(obj, is) {\n  if (!is) throw new Error("undefined index");\n  if (typeof is === "string") return indexObject(obj, is.split("."));else if (is.length === 0) return obj;else return indexObject(obj[is[0]], is.slice(1));\n}\n/**\n * RPC object represents a single site in the\n * communication protocol between the application and the plugin\n *\n * @param {Object} connection a special object allowing to send\n * and receive messages from the opposite site (basically it\n * should only provide send() and onMessage() methods)\n */\n\n\nclass RPC extends _utils_js__WEBPACK_IMPORTED_MODULE_0__["MessageEmitter"] {\n  constructor(connection, config, codecs) {\n    super(config && config.debug);\n    this._connection = connection;\n    this.config = config || {};\n    this._codecs = codecs || {};\n    this._object_store = {};\n    this._method_weakmap = new WeakMap();\n    this._object_weakmap = new WeakMap();\n    this._local_api = null; // make sure there is an execute function\n\n    const name = this.config.name;\n\n    this._connection.execute = this._connection.execute || function () {\n      throw new Error(`connection.execute not implemented (in "${name}")`);\n    };\n\n    this._store = new ReferenceStore();\n    this._method_refs = new ReferenceStore();\n\n    this._method_refs.onReady(() => {\n      this._fire("remoteIdle");\n    });\n\n    this._method_refs.onBusy(() => {\n      this._fire("remoteBusy");\n    });\n\n    this._setupMessageHanlders();\n  }\n\n  init() {\n    this._connection.emit({\n      type: "initialized",\n      config: this.config,\n      peer_id: this._connection.peer_id\n    });\n  }\n\n  setConfig(config) {\n    if (config) for (const k of Object.keys(config)) {\n      this.config[k] = config[k];\n    }\n  }\n  /**\n   * Set a handler to be called when received a responce from the\n   * remote site reporting that the previously provided interface\n   * has been successfully set as remote for that site\n   *\n   * @param {Function} handler\n   */\n\n\n  getRemoteCallStack() {\n    return this._method_refs.getStack();\n  }\n  /**\n   * @returns {Object} set of remote interface methods\n   */\n\n\n  getRemote() {\n    return this._remote_interface;\n  }\n  /**\n   * Sets the interface of this site making it available to the\n   * remote site by sending a message with a set of methods names\n   *\n   * @param {Object} _interface to set\n   */\n\n\n  setInterface(_interface, config) {\n    config = config || {};\n    this.config.name = config.name || this.config.name;\n    this.config.description = config.description || this.config.description;\n\n    if (this.config.forwarding_functions) {\n      for (let func_name of this.config.forwarding_functions) {\n        const _remote = this._remote_interface;\n\n        if (_remote[func_name]) {\n          if (_interface.constructor === Object) {\n            if (!_interface[func_name]) {\n              _interface[func_name] = (...args) => {\n                _remote[func_name](...args);\n              };\n            }\n          } else if (_interface.constructor.constructor === Function) {\n            if (!_interface.constructor.prototype[func_name]) {\n              _interface.constructor.prototype[func_name] = (...args) => {\n                _remote[func_name](...args);\n              };\n            }\n          }\n        }\n      }\n    }\n\n    this._local_api = _interface;\n\n    this._fire("interfaceAvailable");\n  }\n  /**\n   * Sends the actual interface to the remote site upon it was\n   * updated or by a special request of the remote site\n   */\n\n\n  sendInterface() {\n    if (!this._local_api) {\n      throw new Error("interface is not set.");\n    }\n\n    this._encode(this._local_api, true).then(api => {\n      this._connection.emit({\n        type: "setInterface",\n        api: api\n      });\n    });\n  }\n\n  _disposeObject(objectId) {\n    if (this._object_store[objectId]) {\n      delete this._object_store[objectId];\n    } else {\n      throw new Error(`Object (id=${objectId}) not found.`);\n    }\n  }\n\n  disposeObject(obj) {\n    return new Promise((resolve, reject) => {\n      if (this._object_weakmap.has(obj)) {\n        const objectId = this._object_weakmap.get(obj);\n\n        this._connection.once("disposed", data => {\n          if (data.error) reject(new Error(data.error));else resolve();\n        });\n\n        this._connection.emit({\n          type: "disposeObject",\n          object_id: objectId\n        });\n      } else {\n        throw new Error("Invalid object");\n      }\n    });\n  }\n  /**\n   * Handles a message from the remote site\n   */\n\n\n  _setupMessageHanlders() {\n    this._connection.on("init", this.init);\n\n    this._connection.on("execute", data => {\n      Promise.resolve(this._connection.execute(data.code)).then(() => {\n        this._connection.emit({\n          type: "executed"\n        });\n      }).catch(e => {\n        console.error(e);\n\n        this._connection.emit({\n          type: "executed",\n          error: String(e)\n        });\n      });\n    });\n\n    this._connection.on("method", async data => {\n      let resolve, reject, method, method_this, args, result;\n\n      try {\n        if (data.promise) {\n          [resolve, reject] = await this._unwrap(data.promise, false);\n        }\n\n        const _interface = this._object_store[data.object_id];\n        method = indexObject(_interface, data.name);\n\n        if (data.name.includes(".")) {\n          const tmp = data.name.split(".");\n          const intf_index = tmp.slice(0, tmp.length - 1).join(".");\n          method_this = indexObject(_interface, intf_index);\n        } else {\n          method_this = _interface;\n        }\n\n        args = await this._unwrap(data.args, true);\n\n        if (data.promise) {\n          result = method.apply(method_this, args);\n\n          if (result instanceof Promise || method.constructor && method.constructor.name === "AsyncFunction") {\n            result.then(resolve).catch(reject);\n          } else {\n            resolve(result);\n          }\n        } else {\n          method.apply(method_this, args);\n        }\n      } catch (err) {\n        console.error(this.config.name, err);\n\n        if (reject) {\n          reject(err);\n        }\n      }\n    });\n\n    this._connection.on("callback", async data => {\n      let resolve, reject, method, args, result;\n\n      try {\n        if (data.promise) {\n          [resolve, reject] = await this._unwrap(data.promise, false);\n        }\n\n        if (data.promise) {\n          method = this._store.fetch(data.id);\n          args = await this._unwrap(data.args, true);\n\n          if (!method) {\n            throw new Error("Callback function can only called once, if you want to call a function for multiple times, please make it as a plugin api function. See https://imjoy.io/docs for more details.");\n          }\n\n          result = method.apply(null, args);\n\n          if (result instanceof Promise || method.constructor && method.constructor.name === "AsyncFunction") {\n            result.then(resolve).catch(reject);\n          } else {\n            resolve(result);\n          }\n        } else {\n          method = this._store.fetch(data.id);\n          args = await this._unwrap(data.args, true);\n\n          if (!method) {\n            throw new Error("Please notice that callback function can only called once, if you want to call a function for multiple times, please make it as a plugin api function. See https://imjoy.io/docs for more details.");\n          }\n\n          method.apply(null, args);\n        }\n      } catch (err) {\n        console.error(this.config.name, err);\n\n        if (reject) {\n          reject(err);\n        }\n      }\n    });\n\n    this._connection.on("disposeObject", data => {\n      try {\n        this._disposeObject(data.object_id);\n\n        this._connection.emit({\n          type: "disposed"\n        });\n      } catch (e) {\n        console.error(e);\n\n        this._connection.emit({\n          type: "disposed",\n          error: String(e)\n        });\n      }\n    });\n\n    this._connection.on("setInterface", data => {\n      this._setRemoteInterface(data.api);\n    });\n\n    this._connection.on("getInterface", () => {\n      this._fire("getInterface");\n\n      if (this._local_api) {\n        this.sendInterface();\n      } else {\n        this.once("interfaceAvailable", () => {\n          this.sendInterface();\n        });\n      }\n    });\n\n    this._connection.on("interfaceSetAsRemote", () => {\n      this._fire("interfaceSetAsRemote");\n    });\n\n    this._connection.on("disconnect", () => {\n      this._fire("beforeDisconnect");\n\n      this._connection.disconnect();\n\n      this._fire("disconnected");\n    });\n  }\n  /**\n   * Sends a requests to the remote site asking it to provide its\n   * current interface\n   */\n\n\n  requestRemote() {\n    this._connection.emit({\n      type: "getInterface"\n    });\n  }\n\n  _ndarray(typedArray, shape, dtype) {\n    const _dtype = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__["typedArrayToDtype"])(typedArray);\n\n    if (dtype && dtype !== _dtype) {\n      throw "dtype doesn\'t match the type of the array: " + _dtype + " != " + dtype;\n    }\n\n    shape = shape || [typedArray.length];\n    return {\n      _rtype: "ndarray",\n      _rvalue: typedArray.buffer,\n      _rshape: shape,\n      _rdtype: _dtype\n    };\n  }\n  /**\n   * Sets the new remote interface provided by the other site\n   *\n   * @param {Array} names list of function names\n   */\n\n\n  _setRemoteInterface(api) {\n    this._decode(api).then(intf => {\n      this._remote_interface = intf;\n\n      this._fire("remoteReady");\n\n      this._reportRemoteSet();\n    });\n  }\n  /**\n   * Generates the wrapped function corresponding to a single remote\n   * method. When the generated function is called, it will send the\n   * corresponding message to the remote site asking it to execute\n   * the particular method of its interface\n   *\n   * @param {String} name of the remote method\n   *\n   * @returns {Function} wrapped remote method\n   */\n\n\n  _genRemoteMethod(targetId, name, objectId) {\n    const me = this;\n\n    const remoteMethod = function () {\n      return new Promise(async (resolve, reject) => {\n        let id = null;\n\n        try {\n          id = me._method_refs.put(objectId ? objectId + "/" + name : name);\n\n          const wrapped_resolve = function () {\n            if (id !== null) me._method_refs.fetch(id);\n            return resolve.apply(this, arguments);\n          };\n\n          const wrapped_reject = function () {\n            if (id !== null) me._method_refs.fetch(id);\n            return reject.apply(this, arguments);\n          };\n\n          const encodedPromise = await me._wrap([wrapped_resolve, wrapped_reject]); // store the key id for removing them from the reference store together\n\n          wrapped_resolve.__promise_pair = encodedPromise[1]._rvalue;\n          wrapped_reject.__promise_pair = encodedPromise[0]._rvalue;\n          let args = Array.prototype.slice.call(arguments);\n\n          if (name === "register" || name === "registerService" || name === "export" || name === "on") {\n            args = await me._wrap(args, true);\n          } else {\n            args = await me._wrap(args);\n          }\n\n          const transferables = args.__transferables__;\n          if (transferables) delete args.__transferables__;\n\n          me._connection.emit({\n            type: "method",\n            target_id: targetId,\n            name: name,\n            object_id: objectId,\n            args: args,\n            promise: encodedPromise\n          }, transferables);\n        } catch (e) {\n          if (id) me._method_refs.fetch(id);\n          reject(`Failed to exectue remote method (interface: ${objectId || me.id}, method: ${name}), error: ${e}`);\n        }\n      });\n    };\n\n    remoteMethod.__remote_method = true;\n    return remoteMethod;\n  }\n  /**\n   * Sends a responce reporting that interface just provided by the\n   * remote site was successfully set by this site as remote\n   */\n\n\n  _reportRemoteSet() {\n    this._connection.emit({\n      type: "interfaceSetAsRemote"\n    });\n  }\n  /**\n   * Prepares the provided set of remote method arguments for\n   * sending to the remote site, replaces all the callbacks with\n   * identifiers\n   *\n   * @param {Array} args to wrap\n   *\n   * @returns {Array} wrapped arguments\n   */\n\n\n  async _encode(aObject, asInterface, objectId) {\n    const aType = typeof aObject;\n\n    if (aType === "number" || aType === "string" || aType === "boolean" || aObject === null || aObject === undefined || aObject instanceof ArrayBuffer) {\n      return aObject;\n    }\n\n    let bObject;\n\n    if (typeof aObject === "function") {\n      if (asInterface) {\n        if (!objectId) throw new Error("objectId is not specified.");\n        bObject = {\n          _rtype: "interface",\n          _rtarget_id: this._connection.peer_id,\n          _rintf: objectId,\n          _rvalue: asInterface\n        };\n\n        this._method_weakmap.set(aObject, bObject);\n      } else if (this._method_weakmap.has(aObject)) {\n        bObject = this._method_weakmap.get(aObject);\n      } else {\n        const cid = this._store.put(aObject);\n\n        bObject = {\n          _rtype: "callback",\n          _rtarget_id: this._connection.peer_id,\n          _rname: aObject.constructor && aObject.constructor.name || cid,\n          _rvalue: cid\n        };\n      }\n\n      return bObject;\n    } // skip if already encoded\n\n\n    if (aObject.constructor instanceof Object && aObject._rtype) {\n      // make sure the interface functions are encoded\n      if (aObject._rintf) {\n        const temp = aObject._rtype;\n        delete aObject._rtype;\n        bObject = await this._encode(aObject, asInterface, objectId);\n        bObject._rtype = temp;\n      } else {\n        bObject = aObject;\n      }\n\n      return bObject;\n    }\n\n    const transferables = [];\n    const _transfer = aObject._transfer;\n    const isarray = Array.isArray(aObject);\n\n    for (let tp of Object.keys(this._codecs)) {\n      const codec = this._codecs[tp];\n\n      if (codec.encoder && aObject instanceof codec.type) {\n        // TODO: what if multiple encoders found\n        let encodedObj = await Promise.resolve(codec.encoder(aObject));\n        if (encodedObj && !encodedObj._rtype) encodedObj._rtype = codec.name; // encode the functions in the interface object\n\n        if (encodedObj && encodedObj._rintf) {\n          const temp = encodedObj._rtype;\n          delete encodedObj._rtype;\n          encodedObj = await this._encode(encodedObj, asInterface, objectId);\n          encodedObj._rtype = temp;\n        }\n\n        bObject = encodedObj;\n        return bObject;\n      }\n    }\n\n    if (\n    /*global tf*/\n    typeof tf !== "undefined" && tf.Tensor && aObject instanceof tf.Tensor) {\n      const v_buffer = aObject.dataSync();\n\n      if (aObject._transfer || _transfer) {\n        transferables.push(v_buffer.buffer);\n        delete aObject._transfer;\n      }\n\n      bObject = {\n        _rtype: "ndarray",\n        _rvalue: v_buffer.buffer,\n        _rshape: aObject.shape,\n        _rdtype: aObject.dtype\n      };\n    } else if (\n    /*global nj*/\n    typeof nj !== "undefined" && nj.NdArray && aObject instanceof nj.NdArray) {\n      const dtype = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__["typedArrayToDtype"])(aObject.selection.data);\n\n      if (aObject._transfer || _transfer) {\n        transferables.push(aObject.selection.data.buffer);\n        delete aObject._transfer;\n      }\n\n      bObject = {\n        _rtype: "ndarray",\n        _rvalue: aObject.selection.data.buffer,\n        _rshape: aObject.shape,\n        _rdtype: dtype\n      };\n    } else if (aObject instanceof Error) {\n      console.error(aObject);\n      bObject = {\n        _rtype: "error",\n        _rvalue: aObject.toString()\n      };\n    } else if (typeof File !== "undefined" && aObject instanceof File) {\n      bObject = {\n        _rtype: "file",\n        _rvalue: aObject,\n        _rpath: aObject._path || aObject.webkitRelativePath\n      };\n    } // send objects supported by structure clone algorithm\n    // https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\n    else if (aObject !== Object(aObject) || aObject instanceof Boolean || aObject instanceof String || aObject instanceof Date || aObject instanceof RegExp || aObject instanceof ImageData || typeof FileList !== "undefined" && aObject instanceof FileList) {\n        bObject = aObject; // TODO: avoid object such as DynamicPlugin instance.\n      } else if (typeof File !== "undefined" && aObject instanceof File) {\n        bObject = {\n          _rtype: "file",\n          _rname: aObject.name,\n          _rmime: aObject.type,\n          _rvalue: aObject,\n          _rpath: aObject._path || aObject.webkitRelativePath\n        };\n      } else if (aObject instanceof Blob) {\n        bObject = {\n          _rtype: "blob",\n          _rvalue: aObject\n        };\n      } else if (aObject instanceof ArrayBufferView) {\n        if (aObject._transfer || _transfer) {\n          transferables.push(aObject.buffer);\n          delete aObject._transfer;\n        }\n\n        const dtype = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__["typedArrayToDtype"])(aObject);\n        bObject = {\n          _rtype: "typedarray",\n          _rvalue: aObject.buffer,\n          _rdtype: dtype\n        };\n      } else if (aObject instanceof DataView) {\n        if (aObject._transfer || _transfer) {\n          transferables.push(aObject.buffer);\n          delete aObject._transfer;\n        }\n\n        bObject = {\n          _rtype: "memoryview",\n          _rvalue: aObject.buffer\n        };\n      } else if (aObject instanceof Set) {\n        bObject = {\n          _rtype: "set",\n          _rvalue: await this._encode(Array.from(aObject), asInterface)\n        };\n      } else if (aObject instanceof Map) {\n        bObject = {\n          _rtype: "orderedmap",\n          _rvalue: await this._encode(Array.from(aObject), asInterface)\n        };\n      } else if (aObject.constructor instanceof Object || Array.isArray(aObject)) {\n        bObject = isarray ? [] : {};\n        let keys; // an object/array\n\n        if (aObject.constructor === Object || Array.isArray(aObject)) {\n          keys = Object.keys(aObject);\n        } // a class\n        else if (aObject.constructor === Function) {\n            throw new Error("Please instantiate the class before exportting it.");\n          } // instance of a class\n          else if (aObject.constructor.constructor === Function) {\n              keys = Object.getOwnPropertyNames(Object.getPrototypeOf(aObject)).concat(Object.keys(aObject)); // TODO: use a proxy object to represent the actual object\n              // always encode class instance as interface\n\n              asInterface = true;\n            } else {\n              throw Error("Unsupported interface type");\n            }\n\n        let hasFunction = false; // encode interfaces\n\n        if (aObject._rintf || asInterface) {\n          if (!objectId) {\n            objectId = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__["randId"])();\n            this._object_store[objectId] = aObject;\n          }\n\n          for (let k of keys) {\n            if (k === "constructor") continue;\n\n            if (k.startsWith("_")) {\n              continue;\n            }\n\n            bObject[k] = await this._encode(aObject[k], typeof asInterface === "string" ? asInterface + "." + k : k, objectId);\n\n            if (typeof aObject[k] === "function") {\n              hasFunction = true;\n            }\n          } // object id for dispose the object remotely\n\n\n          if (hasFunction) bObject._rintf = objectId; // remove interface when closed\n\n          if (aObject.on && typeof aObject.on === "function") {\n            aObject.on("close", () => {\n              delete this._object_store[objectId];\n            });\n          }\n        } else {\n          for (let k of keys) {\n            if (["hasOwnProperty", "constructor"].includes(k)) continue;\n            bObject[k] = await this._encode(aObject[k]);\n          }\n        } // for example, browserFS object\n\n      } else if (typeof aObject === "object") {\n        const keys = Object.getOwnPropertyNames(Object.getPrototypeOf(aObject)).concat(Object.keys(aObject));\n        const objectId = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__["randId"])();\n\n        for (let k of keys) {\n          if (["hasOwnProperty", "constructor"].includes(k)) continue; // encode as interface\n\n          bObject[k] = await this._encode(aObject[k], k, bObject);\n        } // object id, used for dispose the object\n\n\n        bObject._rintf = objectId;\n      } else {\n        throw "imjoy-rpc: Unsupported data type:" + aObject;\n      }\n\n    if (transferables.length > 0) {\n      bObject.__transferables__ = transferables;\n    }\n\n    if (!bObject) {\n      throw new Error("Failed to encode object");\n    }\n\n    return bObject;\n  }\n\n  async _decode(aObject, withPromise) {\n    if (!aObject) {\n      return aObject;\n    }\n\n    let bObject;\n\n    if (aObject["_rtype"]) {\n      if (this._codecs[aObject._rtype] && this._codecs[aObject._rtype].decoder) {\n        if (aObject._rintf) {\n          const temp = aObject._rtype;\n          delete aObject._rtype;\n          aObject = await this._decode(aObject, withPromise);\n          aObject._rtype = temp;\n        }\n\n        bObject = await Promise.resolve(this._codecs[aObject._rtype].decoder(aObject));\n      } else if (aObject._rtype === "callback") {\n        bObject = this._genRemoteCallback(aObject._rtarget_id, aObject._rvalue, withPromise);\n      } else if (aObject._rtype === "interface") {\n        bObject = this._genRemoteMethod(aObject._rtarget_id, aObject._rvalue, aObject._rintf);\n      } else if (aObject._rtype === "ndarray") {\n        /*global nj tf*/\n        //create build array/tensor if used in the plugin\n        if (typeof nj !== "undefined" && nj.array) {\n          if (Array.isArray(aObject._rvalue)) {\n            aObject._rvalue = aObject._rvalue.reduce(_appendBuffer);\n          }\n\n          bObject = nj.array(new Uint8(aObject._rvalue), aObject._rdtype).reshape(aObject._rshape);\n        } else if (typeof tf !== "undefined" && tf.Tensor) {\n          if (Array.isArray(aObject._rvalue)) {\n            aObject._rvalue = aObject._rvalue.reduce(_appendBuffer);\n          }\n\n          const arraytype = _utils_js__WEBPACK_IMPORTED_MODULE_0__["dtypeToTypedArray"][aObject._rdtype];\n          bObject = tf.tensor(new arraytype(aObject._rvalue), aObject._rshape, aObject._rdtype);\n        } else {\n          //keep it as regular if transfered to the main app\n          bObject = aObject;\n        }\n      } else if (aObject._rtype === "error") {\n        bObject = new Error(aObject._rvalue);\n      } else if (aObject._rtype === "file") {\n        if (aObject._rvalue instanceof File) {\n          bObject = aObject._rvalue; //patch _path\n\n          bObject._path = aObject._rpath;\n        } else {\n          bObject = new File([aObject._rvalue], aObject._rname, {\n            type: aObject._rmime\n          });\n          bObject._path = aObject._rpath;\n        }\n      } else if (aObject._rtype === "typedarray") {\n        const arraytype = _utils_js__WEBPACK_IMPORTED_MODULE_0__["dtypeToTypedArray"][aObject._rdtype];\n        if (!arraytype) throw new Error("unsupported dtype: " + aObject._rdtype);\n        bObject = new arraytype(aObject._rvalue);\n      } else if (aObject._rtype === "memoryview") {\n        bObject = new DataView(aObject._rvalue);\n      } else if (aObject._rtype === "blob") {\n        if (aObject._rvalue instanceof Blob) {\n          bObject = aObject._rvalue;\n        } else {\n          bObject = new Blob([aObject._rvalue], {\n            type: aObject._rmime\n          });\n        }\n      } else if (aObject._rtype === "orderedmap") {\n        bObject = new Map((await this._decode(aObject._rvalue, withPromise)));\n      } else if (aObject._rtype === "set") {\n        bObject = new Set((await this._decode(aObject._rvalue, withPromise)));\n      } else {\n        // make sure all the interface functions are decoded\n        if (aObject._rintf) {\n          const temp = aObject._rtype;\n          delete aObject._rtype;\n          bObject = await this._decode(aObject, withPromise);\n          bObject._rtype = temp;\n        } else bObject = aObject;\n      }\n    } else if (aObject.constructor === Object || Array.isArray(aObject)) {\n      const isarray = Array.isArray(aObject);\n      bObject = isarray ? [] : {};\n\n      for (let k of Object.keys(aObject)) {\n        if (isarray || aObject.hasOwnProperty(k)) {\n          const v = aObject[k];\n          bObject[k] = await this._decode(v, withPromise);\n        }\n      }\n    } else {\n      bObject = aObject;\n    }\n\n    if (bObject === undefined) {\n      throw new Error("Failed to decode object");\n    } // store the object id for dispose\n\n\n    if (aObject._rintf) {\n      this._object_weakmap.set(bObject, aObject._rintf);\n    }\n\n    return bObject;\n  }\n\n  async _wrap(args, asInterface) {\n    return await this._encode(args, asInterface);\n  }\n  /**\n   * Unwraps the set of arguments delivered from the remote site,\n   * replaces all callback identifiers with a function which will\n   * initiate sending that callback identifier back to other site\n   *\n   * @param {Object} args to unwrap\n   *\n   * @param {Boolean} withPromise is true means this the callback should contain a promise\n   *\n   * @returns {Array} unwrapped args\n   */\n\n\n  async _unwrap(args, withPromise) {\n    return await this._decode(args, withPromise);\n  }\n  /**\n   * Generates the wrapped function corresponding to a single remote\n   * callback. When the generated function is called, it will send\n   * the corresponding message to the remote site asking it to\n   * execute the particular callback previously saved during a call\n   * by the remote site a method from the interface of this site\n   *\n   * @param {Number} id of the remote callback to execute\n   * @param {Number} argNum argument index of the callback\n   * @param {Boolean} withPromise is true means this the callback should contain a promise\n   *\n   * @returns {Function} wrapped remote callback\n   */\n\n\n  _genRemoteCallback(targetId, cid, withPromise) {\n    const me = this;\n    let remoteCallback;\n\n    if (withPromise) {\n      remoteCallback = function () {\n        return new Promise(async (resolve, reject) => {\n          const args = await me._wrap(Array.prototype.slice.call(arguments));\n          const transferables = args.__transferables__;\n          if (transferables) delete args.__transferables__;\n          const encodedPromise = await me._wrap([resolve, reject]); // store the key id for removing them from the reference store together\n\n          resolve.__promise_pair = encodedPromise[1]._rvalue;\n          reject.__promise_pair = encodedPromise[0]._rvalue;\n\n          try {\n            me._connection.emit({\n              type: "callback",\n              target_id: targetId,\n              id: cid,\n              args: args,\n              promise: encodedPromise\n            }, transferables);\n          } catch (e) {\n            reject(`Failed to exectue remote callback ( id: ${cid}).`);\n          }\n        });\n      };\n\n      return remoteCallback;\n    } else {\n      remoteCallback = async function () {\n        const args = await me._wrap(Array.prototype.slice.call(arguments));\n        const transferables = args.__transferables__;\n        if (transferables) delete args.__transferables__;\n        return me._connection.emit({\n          type: "callback",\n          target_id: targetId,\n          id: cid,\n          args: args\n        }, transferables);\n      };\n\n      return remoteCallback;\n    }\n  }\n  /**\n   * Sends the notification message and breaks the connection\n   */\n\n\n  disconnect() {\n    this._connection.emit({\n      type: "disconnect"\n    });\n\n    setTimeout(() => {\n      this._connection.disconnect();\n    }, 2000);\n  }\n\n}\n/**\n * ReferenceStore is a special object which stores other objects\n * and provides the references (number) instead. This reference\n * may then be sent over a json-based communication channel (IPC\n * to another Node.js process or a message to the Worker). Other\n * site may then provide the reference in the responce message\n * implying the given object should be activated.\n *\n * Primary usage for the ReferenceStore is a storage for the\n * callbacks, which therefore makes it possible to initiate a\n * callback execution by the opposite site (which normally cannot\n * directly execute functions over the communication channel).\n *\n * Each stored object can only be fetched once and is not\n * available for the second time. Each stored object must be\n * fetched, since otherwise it will remain stored forever and\n * consume memory.\n *\n * Stored object indeces are simply the numbers, which are however\n * released along with the objects, and are later reused again (in\n * order to postpone the overflow, which should not likely happen,\n * but anyway).\n */\n\nclass ReferenceStore {\n  constructor() {\n    this._store = {}; // stored object\n\n    this._indices = [0]; // smallest available indices\n\n    this._readyHandler = function () {};\n\n    this._busyHandler = function () {};\n\n    this._readyHandler();\n  }\n  /**\n   * call handler when the store is empty\n   *\n   * @param {FUNCTION} id of a handler\n   */\n\n\n  onReady(readyHandler) {\n    this._readyHandler = readyHandler || function () {};\n  }\n  /**\n   * call handler when the store is not empty\n   *\n   * @param {FUNCTION} id of a handler\n   */\n\n\n  onBusy(busyHandler) {\n    this._busyHandler = busyHandler || function () {};\n  }\n  /**\n   * get the length of the store\n   *\n   */\n\n\n  getStack() {\n    return Object.keys(this._store).length;\n  }\n  /**\n   * @function _genId() generates the new reference id\n   *\n   * @returns {Number} smallest available id and reserves it\n   */\n\n\n  _genId() {\n    let id;\n\n    if (this._indices.length === 1) {\n      id = this._indices[0]++;\n    } else {\n      id = this._indices.shift();\n    }\n\n    return id;\n  }\n  /**\n   * Releases the given reference id so that it will be available by\n   * another object stored\n   *\n   * @param {Number} id to release\n   */\n\n\n  _releaseId(id) {\n    for (let i = 0; i < this._indices.length; i++) {\n      if (id < this._indices[i]) {\n        this._indices.splice(i, 0, id);\n\n        break;\n      }\n    } // cleaning-up the sequence tail\n\n\n    for (let i = this._indices.length - 1; i >= 0; i--) {\n      if (this._indices[i] - 1 === this._indices[i - 1]) {\n        this._indices.pop();\n      } else {\n        break;\n      }\n    }\n  }\n  /**\n   * Stores the given object and returns the refernce id instead\n   *\n   * @param {Object} obj to store\n   *\n   * @returns {Number} reference id of the stored object\n   */\n\n\n  put(obj) {\n    if (this._busyHandler && Object.keys(this._store).length === 0) {\n      this._busyHandler();\n    }\n\n    const id = this._genId();\n\n    this._store[id] = obj;\n    return id;\n  }\n  /**\n   * Retrieves previously stored object and releases its reference\n   *\n   * @param {Number} id of an object to retrieve\n   */\n\n\n  fetch(id) {\n    const obj = this._store[id];\n\n    if (obj && !obj.__remote_method) {\n      delete this._store[id];\n\n      this._releaseId(id);\n\n      if (this._readyHandler && Object.keys(this._store).length === 0) {\n        this._readyHandler();\n      }\n    }\n\n    if (obj && obj.__promise_pair) {\n      this.fetch(obj.__promise_pair);\n    }\n\n    return obj;\n  }\n\n}\n\n/***/ }),\n\n/***/ "./src/utils.js":\n/*!**********************!*\\\n  !*** ./src/utils.js ***!\n  \\**********************/\n/*! exports provided: randId, dtypeToTypedArray, typedArrayToDtypeMapping, typedArrayToDtype, cacheRequirements, setupServiceWorker, urlJoin, MessageEmitter */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n"use strict";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "randId", function() { return randId; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dtypeToTypedArray", function() { return dtypeToTypedArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "typedArrayToDtypeMapping", function() { return typedArrayToDtypeMapping; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "typedArrayToDtype", function() { return typedArrayToDtype; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cacheRequirements", function() { return cacheRequirements; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setupServiceWorker", function() { return setupServiceWorker; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "urlJoin", function() { return urlJoin; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MessageEmitter", function() { return MessageEmitter; });\nfunction randId() {\n  return Math.random().toString(36).substr(2, 10) + new Date().getTime();\n}\nconst dtypeToTypedArray = {\n  int8: Int8Array,\n  int16: Int16Array,\n  int32: Int32Array,\n  uint8: Uint8Array,\n  uint16: Uint16Array,\n  uint32: Uint32Array,\n  float32: Float32Array,\n  float64: Float64Array,\n  array: Array\n};\nconst typedArrayToDtypeMapping = {\n  Int8Array: "int8",\n  Int16Array: "int16",\n  Int32Array: "int32",\n  Uint8Array: "uint8",\n  Uint16Array: "uint16",\n  Uint32Array: "uint32",\n  Float32Array: "float32",\n  Float64Array: "float64",\n  Array: "array"\n};\nconst typedArrayToDtypeKeys = [];\n\nfor (const arrType of Object.keys(typedArrayToDtypeMapping)) {\n  typedArrayToDtypeKeys.push(eval(arrType));\n}\n\nfunction typedArrayToDtype(obj) {\n  let dtype = typedArrayToDtypeMapping[obj.constructor.name];\n\n  if (!dtype) {\n    const pt = Object.getPrototypeOf(obj);\n\n    for (const arrType of typedArrayToDtypeKeys) {\n      if (pt instanceof arrType) {\n        dtype = typedArrayToDtypeMapping[arrType.name];\n        break;\n      }\n    }\n  }\n\n  return dtype;\n}\n\nfunction cacheUrlInServiceWorker(url) {\n  return new Promise(function (resolve, reject) {\n    const message = {\n      command: "add",\n      url: url\n    };\n\n    if (!navigator.serviceWorker || !navigator.serviceWorker.register) {\n      reject("Service worker is not supported.");\n      return;\n    }\n\n    const messageChannel = new MessageChannel();\n\n    messageChannel.port1.onmessage = function (event) {\n      if (event.data && event.data.error) {\n        reject(event.data.error);\n      } else {\n        resolve(event.data && event.data.result);\n      }\n    };\n\n    if (navigator.serviceWorker && navigator.serviceWorker.controller) {\n      navigator.serviceWorker.controller.postMessage(message, [messageChannel.port2]);\n    } else {\n      reject("Service worker controller is not available");\n    }\n  });\n}\n\nasync function cacheRequirements(requirements) {\n  if (!Array.isArray(requirements)) {\n    requirementsm.code.requirements = [requirements];\n  }\n\n  if (requirements && requirements.length > 0) {\n    for (let req of requirements) {\n      //remove prefix\n      if (req.startsWith("js:")) req = req.slice(3);\n      if (req.startsWith("css:")) req = req.slice(4);\n      if (req.startsWith("cache:")) req = req.slice(6);\n      if (!req.startsWith("http")) continue;\n      await cacheUrlInServiceWorker(req).catch(e => {\n        console.error(e);\n      });\n    }\n  }\n}\nfunction setupServiceWorker(baseUrl, targetOrigin, cacheCallback) {\n  // register service worker for offline access\n  if ("serviceWorker" in navigator) {\n    baseUrl = baseUrl || "/";\n    navigator.serviceWorker.register(baseUrl + "plugin-service-worker.js").then(function (registration) {\n      // Registration was successful\n      console.log("ServiceWorker registration successful with scope: ", registration.scope);\n    }, function (err) {\n      // registration failed :(\n      console.log("ServiceWorker registration failed: ", err);\n    });\n    targetOrigin = targetOrigin || "*";\n    cacheCallback = cacheCallback || cacheRequirements;\n\n    if (cacheCallback && typeof cacheCallback !== "function") {\n      throw new Error("config.cache_requirements must be a function");\n    }\n\n    window.addEventListener("message", function (e) {\n      if (targetOrigin === "*" || e.origin === targetOrigin) {\n        const m = e.data;\n\n        if (m.type === "cacheRequirements") {\n          cacheCallback(m.requirements);\n        }\n      }\n    });\n  }\n} //#Source https://bit.ly/2neWfJ2\n\nfunction urlJoin(...args) {\n  return args.join("/").replace(/[\\/]+/g, "/").replace(/^(.+):\\//, "$1://").replace(/^file:/, "file:/").replace(/\\/(\\?|&|#[^!])/g, "$1").replace(/\\?/g, "&").replace("&", "?");\n}\nclass MessageEmitter {\n  constructor(debug) {\n    this._event_handlers = {};\n    this._once_handlers = {};\n    this._debug = debug;\n  }\n\n  emit() {\n    throw new Error("emit is not implemented");\n  }\n\n  on(event, handler) {\n    if (!this._event_handlers[event]) {\n      this._event_handlers[event] = [];\n    }\n\n    this._event_handlers[event].push(handler);\n  }\n\n  once(event, handler) {\n    handler.___event_run_once = true;\n    this.on(event, handler);\n  }\n\n  off(event, handler) {\n    if (!event && !handler) {\n      // remove all events handlers\n      this._event_handlers = {};\n    } else if (event && !handler) {\n      // remove all hanlders for the event\n      if (this._event_handlers[event]) this._event_handlers[event] = [];\n    } else {\n      // remove a specific handler\n      if (this._event_handlers[event]) {\n        const idx = this._event_handlers[event].indexOf(handler);\n\n        if (idx >= 0) {\n          this._event_handlers[event].splice(idx, 1);\n        }\n      }\n    }\n  }\n\n  _fire(event, data) {\n    if (this._event_handlers[event]) {\n      var i = this._event_handlers[event].length;\n\n      while (i--) {\n        const handler = this._event_handlers[event][i];\n\n        try {\n          handler(data);\n        } catch (e) {\n          console.error(e);\n        } finally {\n          if (handler.___event_run_once) {\n            this._event_handlers[event].splice(i, 1);\n          }\n        }\n      }\n    } else {\n      if (this._debug) {\n        console.warn("unhandled event", event, data);\n      }\n    }\n  }\n\n}\n\n/***/ })\n\n/******/ });\n//# sourceMappingURL=plugin.webworker.js.map',null)}},"./src/pluginCore.js":function(e,n,t){t.r(n),t.d(n,"connectRPC",(function(){return o}));var r=t("./src/rpc.js");function o(e,n){n=n||{};const t={},o=new r.RPC(e,n,t);o.on("getInterface",(function(){s()})),o.on("remoteReady",(function(){const e=o.getRemote()||{};if(e.export)throw new Error("`export` is a reserved function name");if(e.onload)throw new Error("`onload` is a reserved function name");if(e.dispose)throw new Error("`dispose` is a reserved function name");e.registerCodec=function(e){if(!e.name||!e.encoder&&!e.decoder)throw new Error("Invalid codec format, please make sure you provide a name, type, encoder and decoder.");if(e.type)for(let n of Object.keys(t))t[n].type!==e.type&&n!==e.name||(delete t[n],console.warn("Remove duplicated codec: "+n));t[e.name]=e},e.init=function(e){o.setInterface({setup(){}},e)},e.disposeObject=function(e){o.disposeObject(e)},e.export=function(e,n){o.setInterface(e,n)},e.onLoad=function(e){e=c(e),i?e():a.push(e)},e.dispose=function(e){o.disconnect()},"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?(self.api=e,self.postMessage({type:"imjoy_remote_api_ready"})):window.dispatchEvent(new CustomEvent("imjoy_remote_api_ready",{detail:e}))}));let i=!1;const a=[],s=function(){if(!i){let e;for(i=!0;e=a.pop();)e()}},c=function(e){const n=typeof e;if("function"!==n)throw new Error("A function may only be subsribed to the event, "+n+" was provided instead");return e};return o}},"./src/pluginIframe.js":function(module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Connection",(function(){return Connection})),__webpack_require__.d(__webpack_exports__,"default",(function(){return setupIframe}));var _pluginCore_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/pluginCore.js"),_rpc_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/rpc.js"),_utils_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/utils.js");function _htmlToElement(e){var n=document.createElement("template");return e=e.trim(),n.innerHTML=e,n.content.firstChild}var _importScript=function(e){return new Promise(((n,t)=>{var r=document.createElement("script");r.src=e,r.type="text/javascript",r.onload=n,r.onreadystatechange=function(){"loaded"!==this.readyState&&"complete"!==this.readyState||n()},r.onerror=t,document.head.appendChild(r)}))};async function importScripts(){for(var e=Array.prototype.slice.call(arguments),n=e.length,t=0;t<n;t++)await _importScript(e[t])}class Connection extends _utils_js__WEBPACK_IMPORTED_MODULE_2__.MessageEmitter{constructor(e){super(e&&e.debug),this.config=e||{},this.peer_id=Object(_utils_js__WEBPACK_IMPORTED_MODULE_2__.randId)()}connect(){this.config.target_origin=this.config.target_origin||"*",window.addEventListener("message",this),this.emit({type:"initialized",config:this.config,origin:window.location.origin,peer_id:this.peer_id}),this._fire("connected")}handleEvent(e){"message"!==e.type||"*"!==this.config.target_origin&&e.origin!==this.config.target_origin||(e.data.peer_id===this.peer_id?this._fire(e.data.type,e.data):this.config.debug&&console.log(`connection peer id mismatch ${e.data.peer_id} !== ${this.peer_id}`))}disconnect(){this._fire("beforeDisconnect"),window.removeEventListener("message",this),this._fire("disconnected")}emit(e){let n;e.__transferables__&&(n=e.__transferables__,delete e.__transferables__),parent.postMessage(e,this.config.target_origin,n)}async execute(code){try{if("requirements"===code.type){if(code.requirements&&(Array.isArray(code.requirements)||"string"==typeof code.requirements))try{var link_node;if(code.requirements="string"==typeof code.requirements?[code.requirements]:code.requirements,!Array.isArray(code.requirements))throw"unsupported requirements definition";for(var i=0;i<code.requirements.length;i++)code.requirements[i].toLowerCase().endsWith(".css")||code.requirements[i].startsWith("css:")?(code.requirements[i].startsWith("css:")&&(code.requirements[i]=code.requirements[i].slice(4)),link_node=document.createElement("link"),link_node.rel="stylesheet",link_node.href=code.requirements[i],document.head.appendChild(link_node)):code.requirements[i].toLowerCase().endsWith(".js")||code.requirements[i].startsWith("js:")?(code.requirements[i].startsWith("js:")&&(code.requirements[i]=code.requirements[i].slice(3)),await importScripts(code.requirements[i])):code.requirements[i].startsWith("http")?await importScripts(code.requirements[i]):code.requirements[i].startsWith("cache:")||console.log("Unprocessed requirements url: "+code.requirements[i])}catch(e){throw"failed to import required scripts: "+code.requirements.toString()}}else if("script"===code.type)if(code.src){var script_node=document.createElement("script");script_node.setAttribute("type",code.attrs.type),script_node.setAttribute("src",code.src),document.head.appendChild(script_node)}else if(!code.content||code.attrs.type&&"text/javascript"!==code.attrs.type){var node=document.createElement("script");node.setAttribute("type",code.attrs.type),node.appendChild(document.createTextNode(code.content)),document.body.appendChild(node)}else eval(code.content);else if("style"===code.type){const e=document.createElement("style");code.src&&(e.src=code.src),e.innerHTML=code.content,document.head.appendChild(e)}else if("link"===code.type){const e=document.createElement("link");code.rel&&(e.rel=code.rel),code.href&&(e.href=code.href),code.attrs&&code.attrs.type&&(e.type=code.attrs.type),document.head.appendChild(e)}else{if("html"!==code.type)throw"unsupported code type.";document.body.appendChild(_htmlToElement(code.content))}parent.postMessage({type:"executed"},this.config.target_origin)}catch(e){console.error("failed to execute scripts: ",code,e),parent.postMessage({type:"executed",error:e.stack||String(e)},this.config.target_origin)}}}function setupIframe(e){(e=e||{}).dedicated_thread=!1,e.lang="javascript",e.api_version=_rpc_js__WEBPACK_IMPORTED_MODULE_1__.API_VERSION;const n=new Connection(e);Object(_pluginCore_js__WEBPACK_IMPORTED_MODULE_0__.connectRPC)(n,e),n.connect()}},"./src/rpc.js":function(e,n,t){t.r(n),t.d(n,"API_VERSION",(function(){return o})),t.d(n,"RPC",(function(){return c}));var r=t("./src/utils.js");const o="0.2.3",i=Object.getPrototypeOf(Object.getPrototypeOf(new Uint8Array)).constructor;function a(e,n){const t=new Uint8Array(e.byteLength+n.byteLength);return t.set(new Uint8Array(e),0),t.set(new Uint8Array(n),e.byteLength),t.buffer}function s(e,n){if(!n)throw new Error("undefined index");return"string"==typeof n?s(e,n.split(".")):0===n.length?e:s(e[n[0]],n.slice(1))}class c extends r.MessageEmitter{constructor(e,n,t){super(n&&n.debug),this._connection=e,this.config=n||{},this._codecs=t||{},this._object_store={},this._method_weakmap=new WeakMap,this._object_weakmap=new WeakMap,this._local_api=null;const r=this.config.name;this._connection.execute=this._connection.execute||function(){throw new Error(`connection.execute not implemented (in "${r}")`)},this._store=new _,this._method_refs=new _,this._method_refs.onReady((()=>{this._fire("remoteIdle")})),this._method_refs.onBusy((()=>{this._fire("remoteBusy")})),this._setupMessageHanlders()}init(){this._connection.emit({type:"initialized",config:this.config,peer_id:this._connection.peer_id})}setConfig(e){if(e)for(const n of Object.keys(e))this.config[n]=e[n]}getRemoteCallStack(){return this._method_refs.getStack()}getRemote(){return this._remote_interface}setInterface(e,n){if(n=n||{},this.config.name=n.name||this.config.name,this.config.description=n.description||this.config.description,this.config.forwarding_functions)for(let t of this.config.forwarding_functions){const n=this._remote_interface;n[t]&&(e.constructor===Object?e[t]||(e[t]=(...e)=>{n[t](...e)}):e.constructor.constructor===Function&&(e.constructor.prototype[t]||(e.constructor.prototype[t]=(...e)=>{n[t](...e)})))}this._local_api=e,this._fire("interfaceAvailable")}sendInterface(){if(!this._local_api)throw new Error("interface is not set.");this._encode(this._local_api,!0).then((e=>{this._connection.emit({type:"setInterface",api:e})}))}_disposeObject(e){if(!this._object_store[e])throw new Error(`Object (id=${e}) not found.`);delete this._object_store[e]}disposeObject(e){return new Promise(((n,t)=>{if(!this._object_weakmap.has(e))throw new Error("Invalid object");{const r=this._object_weakmap.get(e);this._connection.once("disposed",(e=>{e.error?t(new Error(e.error)):n()})),this._connection.emit({type:"disposeObject",object_id:r})}}))}_setupMessageHanlders(){this._connection.on("init",this.init),this._connection.on("execute",(e=>{Promise.resolve(this._connection.execute(e.code)).then((()=>{this._connection.emit({type:"executed"})})).catch((e=>{console.error(e),this._connection.emit({type:"executed",error:String(e)})}))})),this._connection.on("method",(async e=>{let n,t,r,o,i,a;try{e.promise&&([n,t]=await this._unwrap(e.promise,!1));const c=this._object_store[e.object_id];if(r=s(c,e.name),e.name.includes(".")){const n=e.name.split(".");o=s(c,n.slice(0,n.length-1).join("."))}else o=c;i=await this._unwrap(e.args,!0),e.promise?(a=r.apply(o,i),a instanceof Promise||r.constructor&&"AsyncFunction"===r.constructor.name?a.then(n).catch(t):n(a)):r.apply(o,i)}catch(c){console.error(this.config.name,c),t&&t(c)}})),this._connection.on("callback",(async e=>{let n,t,r,o,i;try{if(e.promise&&([n,t]=await this._unwrap(e.promise,!1)),e.promise){if(r=this._store.fetch(e.id),o=await this._unwrap(e.args,!0),!r)throw new Error("Callback function can only called once, if you want to call a function for multiple times, please make it as a plugin api function. See https://imjoy.io/docs for more details.");i=r.apply(null,o),i instanceof Promise||r.constructor&&"AsyncFunction"===r.constructor.name?i.then(n).catch(t):n(i)}else{if(r=this._store.fetch(e.id),o=await this._unwrap(e.args,!0),!r)throw new Error("Please notice that callback function can only called once, if you want to call a function for multiple times, please make it as a plugin api function. See https://imjoy.io/docs for more details.");r.apply(null,o)}}catch(a){console.error(this.config.name,a),t&&t(a)}})),this._connection.on("disposeObject",(e=>{try{this._disposeObject(e.object_id),this._connection.emit({type:"disposed"})}catch(n){console.error(n),this._connection.emit({type:"disposed",error:String(n)})}})),this._connection.on("setInterface",(e=>{this._setRemoteInterface(e.api)})),this._connection.on("getInterface",(()=>{this._fire("getInterface"),this._local_api?this.sendInterface():this.once("interfaceAvailable",(()=>{this.sendInterface()}))})),this._connection.on("interfaceSetAsRemote",(()=>{this._fire("interfaceSetAsRemote")})),this._connection.on("disconnect",(()=>{this._fire("beforeDisconnect"),this._connection.disconnect(),this._fire("disconnected")}))}requestRemote(){this._connection.emit({type:"getInterface"})}_ndarray(e,n,t){const o=Object(r.typedArrayToDtype)(e);if(t&&t!==o)throw"dtype doesn't match the type of the array: "+o+" != "+t;return n=n||[e.length],{_rtype:"ndarray",_rvalue:e.buffer,_rshape:n,_rdtype:o}}_setRemoteInterface(e){this._decode(e).then((e=>{this._remote_interface=e,this._fire("remoteReady"),this._reportRemoteSet()}))}_genRemoteMethod(e,n,t){const r=this,o=function(){return new Promise((async(o,i)=>{let a=null;try{a=r._method_refs.put(t?t+"/"+n:n);const s=function(){return null!==a&&r._method_refs.fetch(a),o.apply(this,arguments)},c=function(){return null!==a&&r._method_refs.fetch(a),i.apply(this,arguments)},_=await r._wrap([s,c]);s.__promise_pair=_[1]._rvalue,c.__promise_pair=_[0]._rvalue;let d=Array.prototype.slice.call(arguments);d="register"===n||"registerService"===n||"export"===n||"on"===n?await r._wrap(d,!0):await r._wrap(d);const l=d.__transferables__;l&&delete d.__transferables__,r._connection.emit({type:"method",target_id:e,name:n,object_id:t,args:d,promise:_},l)}catch(s){a&&r._method_refs.fetch(a),i(`Failed to exectue remote method (interface: ${t||r.id}, method: ${n}), error: ${s}`)}}))};return o.__remote_method=!0,o}_reportRemoteSet(){this._connection.emit({type:"interfaceSetAsRemote"})}async _encode(e,n,t){const o=typeof e;if("number"===o||"string"===o||"boolean"===o||null==e||e instanceof ArrayBuffer)return e;let a;if("function"==typeof e){if(n){if(!t)throw new Error("objectId is not specified.");a={_rtype:"interface",_rtarget_id:this._connection.peer_id,_rintf:t,_rvalue:n},this._method_weakmap.set(e,a)}else if(this._method_weakmap.has(e))a=this._method_weakmap.get(e);else{const n=this._store.put(e);a={_rtype:"callback",_rtarget_id:this._connection.peer_id,_rname:e.constructor&&e.constructor.name||n,_rvalue:n}}return a}if(e.constructor instanceof Object&&e._rtype){if(e._rintf){const r=e._rtype;delete e._rtype,a=await this._encode(e,n,t),a._rtype=r}else a=e;return a}const s=[],c=e._transfer,_=Array.isArray(e);for(let r of Object.keys(this._codecs)){const o=this._codecs[r];if(o.encoder&&e instanceof o.type){let r=await Promise.resolve(o.encoder(e));if(r&&!r._rtype&&(r._rtype=o.name),r&&r._rintf){const e=r._rtype;delete r._rtype,r=await this._encode(r,n,t),r._rtype=e}return a=r,a}}if("undefined"!=typeof tf&&tf.Tensor&&e instanceof tf.Tensor){const n=e.dataSync();(e._transfer||c)&&(s.push(n.buffer),delete e._transfer),a={_rtype:"ndarray",_rvalue:n.buffer,_rshape:e.shape,_rdtype:e.dtype}}else if("undefined"!=typeof nj&&nj.NdArray&&e instanceof nj.NdArray){const n=Object(r.typedArrayToDtype)(e.selection.data);(e._transfer||c)&&(s.push(e.selection.data.buffer),delete e._transfer),a={_rtype:"ndarray",_rvalue:e.selection.data.buffer,_rshape:e.shape,_rdtype:n}}else if(e instanceof Error)console.error(e),a={_rtype:"error",_rvalue:e.toString()};else if("undefined"!=typeof File&&e instanceof File)a={_rtype:"file",_rvalue:e,_rpath:e._path||e.webkitRelativePath};else if(e!==Object(e)||e instanceof Boolean||e instanceof String||e instanceof Date||e instanceof RegExp||e instanceof ImageData||"undefined"!=typeof FileList&&e instanceof FileList)a=e;else if("undefined"!=typeof File&&e instanceof File)a={_rtype:"file",_rname:e.name,_rmime:e.type,_rvalue:e,_rpath:e._path||e.webkitRelativePath};else if(e instanceof Blob)a={_rtype:"blob",_rvalue:e};else if(e instanceof i){(e._transfer||c)&&(s.push(e.buffer),delete e._transfer);const n=Object(r.typedArrayToDtype)(e);a={_rtype:"typedarray",_rvalue:e.buffer,_rdtype:n}}else if(e instanceof DataView)(e._transfer||c)&&(s.push(e.buffer),delete e._transfer),a={_rtype:"memoryview",_rvalue:e.buffer};else if(e instanceof Set)a={_rtype:"set",_rvalue:await this._encode(Array.from(e),n)};else if(e instanceof Map)a={_rtype:"orderedmap",_rvalue:await this._encode(Array.from(e),n)};else if(e.constructor instanceof Object||Array.isArray(e)){let o;if(a=_?[]:{},e.constructor===Object||Array.isArray(e))o=Object.keys(e);else{if(e.constructor===Function)throw new Error("Please instantiate the class before exportting it.");if(e.constructor.constructor!==Function)throw Error("Unsupported interface type");o=Object.getOwnPropertyNames(Object.getPrototypeOf(e)).concat(Object.keys(e)),n=!0}let i=!1;if(e._rintf||n){t||(t=Object(r.randId)(),this._object_store[t]=e);for(let r of o)"constructor"!==r&&(r.startsWith("_")||(a[r]=await this._encode(e[r],"string"==typeof n?n+"."+r:r,t),"function"==typeof e[r]&&(i=!0)));i&&(a._rintf=t),e.on&&"function"==typeof e.on&&e.on("close",(()=>{delete this._object_store[t]}))}else for(let n of o)["hasOwnProperty","constructor"].includes(n)||(a[n]=await this._encode(e[n]))}else{if("object"!=typeof e)throw"imjoy-rpc: Unsupported data type:"+e;{const n=Object.getOwnPropertyNames(Object.getPrototypeOf(e)).concat(Object.keys(e)),t=Object(r.randId)();for(let r of n)["hasOwnProperty","constructor"].includes(r)||(a[r]=await this._encode(e[r],r,a));a._rintf=t}}if(s.length>0&&(a.__transferables__=s),!a)throw new Error("Failed to encode object");return a}async _decode(e,n){if(!e)return e;let t;if(e._rtype)if(this._codecs[e._rtype]&&this._codecs[e._rtype].decoder){if(e._rintf){const t=e._rtype;delete e._rtype,(e=await this._decode(e,n))._rtype=t}t=await Promise.resolve(this._codecs[e._rtype].decoder(e))}else if("callback"===e._rtype)t=this._genRemoteCallback(e._rtarget_id,e._rvalue,n);else if("interface"===e._rtype)t=this._genRemoteMethod(e._rtarget_id,e._rvalue,e._rintf);else if("ndarray"===e._rtype)if("undefined"!=typeof nj&&nj.array)Array.isArray(e._rvalue)&&(e._rvalue=e._rvalue.reduce(a)),t=nj.array(new Uint8(e._rvalue),e._rdtype).reshape(e._rshape);else if("undefined"!=typeof tf&&tf.Tensor){Array.isArray(e._rvalue)&&(e._rvalue=e._rvalue.reduce(a));const n=r.dtypeToTypedArray[e._rdtype];t=tf.tensor(new n(e._rvalue),e._rshape,e._rdtype)}else t=e;else if("error"===e._rtype)t=new Error(e._rvalue);else if("file"===e._rtype)e._rvalue instanceof File?(t=e._rvalue,t._path=e._rpath):(t=new File([e._rvalue],e._rname,{type:e._rmime}),t._path=e._rpath);else if("typedarray"===e._rtype){const n=r.dtypeToTypedArray[e._rdtype];if(!n)throw new Error("unsupported dtype: "+e._rdtype);t=new n(e._rvalue)}else if("memoryview"===e._rtype)t=new DataView(e._rvalue);else if("blob"===e._rtype)t=e._rvalue instanceof Blob?e._rvalue:new Blob([e._rvalue],{type:e._rmime});else if("orderedmap"===e._rtype)t=new Map(await this._decode(e._rvalue,n));else if("set"===e._rtype)t=new Set(await this._decode(e._rvalue,n));else if(e._rintf){const r=e._rtype;delete e._rtype,t=await this._decode(e,n),t._rtype=r}else t=e;else if(e.constructor===Object||Array.isArray(e)){const r=Array.isArray(e);t=r?[]:{};for(let o of Object.keys(e))if(r||e.hasOwnProperty(o)){const r=e[o];t[o]=await this._decode(r,n)}}else t=e;if(void 0===t)throw new Error("Failed to decode object");return e._rintf&&this._object_weakmap.set(t,e._rintf),t}async _wrap(e,n){return await this._encode(e,n)}async _unwrap(e,n){return await this._decode(e,n)}_genRemoteCallback(e,n,t){const r=this;let o;return t?(o=function(){return new Promise((async(t,o)=>{const i=await r._wrap(Array.prototype.slice.call(arguments)),a=i.__transferables__;a&&delete i.__transferables__;const s=await r._wrap([t,o]);t.__promise_pair=s[1]._rvalue,o.__promise_pair=s[0]._rvalue;try{r._connection.emit({type:"callback",target_id:e,id:n,args:i,promise:s},a)}catch(c){o(`Failed to exectue remote callback ( id: ${n}).`)}}))},o):(o=async function(){const t=await r._wrap(Array.prototype.slice.call(arguments)),o=t.__transferables__;return o&&delete t.__transferables__,r._connection.emit({type:"callback",target_id:e,id:n,args:t},o)},o)}disconnect(){this._connection.emit({type:"disconnect"}),setTimeout((()=>{this._connection.disconnect()}),2e3)}}class _{constructor(){this._store={},this._indices=[0],this._readyHandler=function(){},this._busyHandler=function(){},this._readyHandler()}onReady(e){this._readyHandler=e||function(){}}onBusy(e){this._busyHandler=e||function(){}}getStack(){return Object.keys(this._store).length}_genId(){let e;return e=1===this._indices.length?this._indices[0]++:this._indices.shift(),e}_releaseId(e){for(let n=0;n<this._indices.length;n++)if(e<this._indices[n]){this._indices.splice(n,0,e);break}for(let n=this._indices.length-1;n>=0&&this._indices[n]-1===this._indices[n-1];n--)this._indices.pop()}put(e){this._busyHandler&&0===Object.keys(this._store).length&&this._busyHandler();const n=this._genId();return this._store[n]=e,n}fetch(e){const n=this._store[e];return n&&!n.__remote_method&&(delete this._store[e],this._releaseId(e),this._readyHandler&&0===Object.keys(this._store).length&&this._readyHandler()),n&&n.__promise_pair&&this.fetch(n.__promise_pair),n}}},"./src/utils.js":function(module,__webpack_exports__,__webpack_require__){function randId(){return Math.random().toString(36).substr(2,10)+(new Date).getTime()}__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"randId",(function(){return randId})),__webpack_require__.d(__webpack_exports__,"dtypeToTypedArray",(function(){return dtypeToTypedArray})),__webpack_require__.d(__webpack_exports__,"typedArrayToDtypeMapping",(function(){return typedArrayToDtypeMapping})),__webpack_require__.d(__webpack_exports__,"typedArrayToDtype",(function(){return typedArrayToDtype})),__webpack_require__.d(__webpack_exports__,"cacheRequirements",(function(){return cacheRequirements})),__webpack_require__.d(__webpack_exports__,"setupServiceWorker",(function(){return setupServiceWorker})),__webpack_require__.d(__webpack_exports__,"urlJoin",(function(){return urlJoin})),__webpack_require__.d(__webpack_exports__,"MessageEmitter",(function(){return MessageEmitter}));const dtypeToTypedArray={int8:Int8Array,int16:Int16Array,int32:Int32Array,uint8:Uint8Array,uint16:Uint16Array,uint32:Uint32Array,float32:Float32Array,float64:Float64Array,array:Array},typedArrayToDtypeMapping={Int8Array:"int8",Int16Array:"int16",Int32Array:"int32",Uint8Array:"uint8",Uint16Array:"uint16",Uint32Array:"uint32",Float32Array:"float32",Float64Array:"float64",Array:"array"},typedArrayToDtypeKeys=[];for(const arrType of Object.keys(typedArrayToDtypeMapping))typedArrayToDtypeKeys.push(eval(arrType));function typedArrayToDtype(e){let n=typedArrayToDtypeMapping[e.constructor.name];if(!n){const t=Object.getPrototypeOf(e);for(const e of typedArrayToDtypeKeys)if(t instanceof e){n=typedArrayToDtypeMapping[e.name];break}}return n}function cacheUrlInServiceWorker(e){return new Promise((function(n,t){const r={command:"add",url:e};if(!navigator.serviceWorker||!navigator.serviceWorker.register)return void t("Service worker is not supported.");const o=new MessageChannel;o.port1.onmessage=function(e){e.data&&e.data.error?t(e.data.error):n(e.data&&e.data.result)},navigator.serviceWorker&&navigator.serviceWorker.controller?navigator.serviceWorker.controller.postMessage(r,[o.port2]):t("Service worker controller is not available")}))}async function cacheRequirements(e){if(Array.isArray(e)||(requirementsm.code.requirements=[e]),e&&e.length>0)for(let n of e)n.startsWith("js:")&&(n=n.slice(3)),n.startsWith("css:")&&(n=n.slice(4)),n.startsWith("cache:")&&(n=n.slice(6)),n.startsWith("http")&&await cacheUrlInServiceWorker(n).catch((e=>{console.error(e)}))}function setupServiceWorker(e,n,t){if("serviceWorker"in navigator){if(e=e||"/",navigator.serviceWorker.register(e+"plugin-service-worker.js").then((function(e){console.log("ServiceWorker registration successful with scope: ",e.scope)}),(function(e){console.log("ServiceWorker registration failed: ",e)})),n=n||"*",(t=t||cacheRequirements)&&"function"!=typeof t)throw new Error("config.cache_requirements must be a function");window.addEventListener("message",(function(e){if("*"===n||e.origin===n){const n=e.data;"cacheRequirements"===n.type&&t(n.requirements)}}))}}function urlJoin(...e){return e.join("/").replace(/[\/]+/g,"/").replace(/^(.+):\//,"$1://").replace(/^file:/,"file:/").replace(/\/(\?|&|#[^!])/g,"$1").replace(/\?/g,"&").replace("&","?")}class MessageEmitter{constructor(e){this._event_handlers={},this._once_handlers={},this._debug=e}emit(){throw new Error("emit is not implemented")}on(e,n){this._event_handlers[e]||(this._event_handlers[e]=[]),this._event_handlers[e].push(n)}once(e,n){n.___event_run_once=!0,this.on(e,n)}off(e,n){if(e||n){if(e&&!n)this._event_handlers[e]&&(this._event_handlers[e]=[]);else if(this._event_handlers[e]){const t=this._event_handlers[e].indexOf(n);t>=0&&this._event_handlers[e].splice(t,1)}}else this._event_handlers={}}_fire(e,n){if(this._event_handlers[e])for(var t=this._event_handlers[e].length;t--;){const o=this._event_handlers[e][t];try{o(n)}catch(r){console.error(r)}finally{o.___event_run_once&&this._event_handlers[e].splice(t,1)}}else this._debug&&console.warn("unhandled event",e,n)}}}})},module.exports=factory()})(imjoyRpc$1);var imjoyRpc=imjoyRpc$1.exports,index=Object.freeze(Object.assign(Object.create(null),imjoyRpc,{[Symbol.toStringTag]:"Module",default:imjoyRpc}));export{index as i};
